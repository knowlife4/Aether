#pragma kernel ComputeFog

struct LightData
{
    float3 position;
    float3 direction;
    float3 color;
    float intensity;
    float angle;
    int type;
};

struct CameraData
{
    float3 position;
    float4x4 inverseViewMatrix;
    float aspect;
    float fov;
    float near;
    float far;
};

struct FogData
{
    float4x4 trs;
    float3 minimum;
    float3 maximum;
    float3 color;
    float density;
    float scatterCoefficient;
    int type;
};

RWTexture3D<float4> fogTexture;
float3 fogTextureResolution;

StructuredBuffer<CameraData> cameraData;

StructuredBuffer<FogData> fogData;
uint fogDataLength;

StructuredBuffer<LightData> lightData;
uint lightDataLength;

uint sampleCount;

float4 GetRayDirection (uint3 id, CameraData camera)
{
    float x = (id.x / fogTextureResolution.x) * camera.aspect * 2.0 - camera.aspect;
    float y = (id.y / fogTextureResolution.y) * 2.0 - 1.0;
    float z = -(1.0 / tan(radians(camera.fov) / 2.0));
    return normalize(float4(x, y, z, 0.0));
}

float3 GetWorldPosition(uint3 id, CameraData camera)
{
    float4 rayDir = GetRayDirection(id, camera);

    // Transform ray direction to world space
    float3 worldRayDir = mul(camera.inverseViewMatrix, rayDir).xyz;

    // Calculate distance to intersection with near/far planes
    float t = id.z / (fogTextureResolution.z - 1);
    float distance = (camera.near / abs(rayDir.z)) + t * (camera.far / abs(rayDir.z));

    // Return intersection point in world space
    return camera.position + normalize(worldRayDir) * distance;
}

float4 LocalFog (FogData fog, float3 worldPos, out float scatterCoefficient)
{
    float3 s = step(fog.minimum, worldPos) - step(fog.maximum, worldPos);
    float dist = s.x * s.y * s.z;
    
    scatterCoefficient = lerp(0, fog.scatterCoefficient, dist);

    return lerp(float4(0, 0, 0, 0), float4(fog.color, fog.density), dist);
}

float4 GlobalFog (FogData fog, float3 worldPos, out float scatterCoefficient)
{
    scatterCoefficient = fog.scatterCoefficient;
    return float4(fog.color, fog.density);
}

float4 SampleFog (float3 worldPos, float3 viewDirection, out float scatterCoefficient)
{
    float4 fogColor = 0;

    for(uint fogID = 0; fogID < fogDataLength; fogID++)
    {
        FogData fog = fogData[fogID];

        float4 fogOut = 0;
        float scatter = 0;
        switch(fog.type)
        {
            case 0: //local
                fogOut = LocalFog(fog, worldPos, scatter);
                break;
            case 1: //global
                fogOut = GlobalFog(fog, worldPos, scatter);
                break;
        }

        scatterCoefficient += scatter;
        fogColor += fogOut;
    }

    scatterCoefficient = saturate(scatterCoefficient);

    return fogColor;
}

float3 PointLight (LightData light, float3 worldPos)
{
    float distance = max(0.0, length(light.position - worldPos));
    float attenuation = 1 / (1 + 0.12 * distance + 1 * distance * distance);

    float intensity = light.intensity * attenuation * 100;

    return light.color * intensity;
}

float3 DirectionalLight(LightData light)
{
    return light.color * light.intensity;
}

float3 SpotLight(LightData light, float3 worldPos)
{
    float3 adjustedPos = worldPos += light.direction;

    float distance = max(0.0, length(light.position - worldPos));
    float attenuation = 1.0 / (1.0 + 0.01 * distance + 0.1 * distance * distance);

    float angle = light.angle / 2.0;
    float inner = angle - 10.0;
    float outer = angle + 5.0;

    float intensity = light.intensity * 300.0 * attenuation * saturate((dot(light.direction, normalize(worldPos - light.position)) - cos(radians(outer))) / (cos(radians(inner)) - cos(radians(outer))));

    return light.color * intensity;
}

float Phase(float3 v, float3 l, float g) 
{
	float g2 = g * g;
	return (1.0 / (4.0 * 3.14159)) * ((1.0 - g2) / pow(abs(1.0 + g2 - 2.0 * g * max(0.0, dot(v, l))), 1.5));
}

float3 SampleLights (float3 worldPos, float3 viewDirection, float scatterCoefficient)
{
    float3 color = 0;

    for(uint lightID = 0; lightID < lightDataLength; lightID++)
    {
        LightData light = lightData[lightID];

        float3 lightDirection = normalize(worldPos - light.position);

        switch(light.type)
        {
            case 0: //Spot
                color += SpotLight(light, worldPos) * Phase(viewDirection, lightDirection, scatterCoefficient);
                break;
            case 1: //Directional
                color += DirectionalLight(light);
                break;
            case 2: //Point
                color += PointLight(light, worldPos) * Phase(viewDirection, lightDirection, scatterCoefficient);
                break;
        }
    }

    return color;
}


float4 Sample (float3 worldPos, float3 viewDirection)
{
    float scatterCoefficient;
    float4 fog = SampleFog(worldPos, viewDirection, scatterCoefficient);
    float3 light = SampleLights(worldPos, viewDirection, scatterCoefficient);

    float scattering = 0.025 * fog.a;
    float absorption = 0.001 * fog.a;

    return float4(light * fog.rgb * scattering, scattering + absorption);
}

[numthreads(16, 8, 8)]
void ComputeFog (uint3 id : SV_DispatchThreadID)
{
    CameraData camera = cameraData[0];

    float3 worldPos = GetWorldPosition(id, camera);
    float3 viewDirection = normalize(camera.position - worldPos);

    float4 sum = 0;
    for(uint i = 0; i < sampleCount; i++)
    {
        float3 offset = mul(camera.inverseViewMatrix, GetRayDirection(id, camera)).xyz * i;

        float3 samplePos = worldPos + offset;

        sum += Sample(samplePos, viewDirection);
    }

    fogTexture[id] = sum / sampleCount;
}