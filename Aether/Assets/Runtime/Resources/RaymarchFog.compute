// ! REWRITE
#pragma kernel RaymarchFog

RWTexture3D<float4> raymarchTexture;

uint depthResolution;


float4 AccumulateScattering(float4 colorAndDensityFront, float4 colorAndDensityBack) {
	float3 light = colorAndDensityFront.rgb + saturate(exp(-colorAndDensityFront.a)) * colorAndDensityBack.rgb;
	return float4(light.rgb, colorAndDensityFront.a + colorAndDensityBack.a);
}

void WriteOutput(uint3 pos, float4 colorAndDensity) {
	float4 finalValue = float4(colorAndDensity.rgb, saturate(exp(-colorAndDensity.a)));
	raymarchTexture[pos] = finalValue;
}

[numthreads(32, 18, 1)]
void RaymarchFog(uint3 id : SV_DispatchThreadID)
{
	float4 currentSliceValue = raymarchTexture[uint3(id.xy, 0)];
	
	WriteOutput(uint3(id.xy, 0), currentSliceValue);
	
	for (uint z = 1; z < depthResolution; z++) 
	{
		uint3 volumePos = uint3(id.xy, z);

		float4 nextValue = raymarchTexture[volumePos];

		currentSliceValue = AccumulateScattering(currentSliceValue, nextValue);
		WriteOutput(volumePos, currentSliceValue);
	}
}